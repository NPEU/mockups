/*
*/
$meter-namespace: c- !default;
$theme-namespace: t- !default;

$meter--text-color: #333;



.#{$meter-namespace}meter {

    &#{&} {
        display: block;
        width: 100%;
        border-style: solid;
        border-width: 1px;
        border-color: currentColor;
        background: transparent;
        border-radius: 0.5em;
        height: 1.2rem;
        margin: 0.6rem 0;
        position: relative;
        overflow: hidden;
    }
    
        & meter {
            //display: block;
            //width: 100%;
            opacity: 0;
        }
        
        #{&}__value {
            position: absolute;
            left: 0;
            top: 0;
            height: 1.2rem;
            background-color: currentColor;
        }
}


@mixin meter-theme ($name: "", $theme: ()) {
	// Set up theme name:
	$theme-class: "";
	@if $name != "" {
		$theme-class: unquote('.')#{$theme-namespace}#{$name};
	}
	//@debug $theme-class;
	
    $text-color : map-get($theme, meter-text-color);
    
	/*@if $border-color == null {
		$border-color: darken($background-color, 10%);
    }*/

	// Problem here is that we only want to set a darker border colour if we haven't explicated
	// set one. Default is passed to config, but theme override may be different and we need to know
	// if it is, because we don't want to auto-darken if we've deliberately set a specific color.
	// We want to allow a theme cascade (setting minimum properties) but also allow specific
	// overrides, but should allow for branched cascades too.
	// Handle override default versus specified in theme.

	// Weirdly, SASS throws an error at this
	// "Error: Base-level rules cannot contain the parent-selector-referencing character '&'."
	// There's no '&' being used, so not sure what's going on.
	// Using nested option as a workaround.
	//.#{$meter-namespace}meter.#{$theme-prefix}#{$name} {
	// + meter + . + #{$theme-prefix} + #{$name}
	.#{$meter-namespace}meter#{$theme-class} {

		color: $text-color;
        

		//outline: 1px solid $border-color;
	}

}

@include meter-theme(
    "",
    (
        meter-text-color : $meter--text-color,
    )
);
