/*

*/

$user-content-namespace: c- !default;

$theme-namespace: t- !default;

$theme-only: false !default;

$uc-breakpoint: 35em !default;
// Note - no theme yet!

// We don't need this if we're only themeing the pattern:
@if $theme-only == false {
    .#{$user-content-namespace}user-content {

        // Contact list:
        [data-contains~="contact-details"] {
            @extend .c-contact-list;
        }

        [data-display-is~="width-one-quarter"] + [data-contains~="contact-details"] {
            @include ff-width(100%, $uc-breakpoint, 75%);
        }

        [data-display-is~="width-one-third"] + [data-contains~="contact-details"] {
            @include ff-width(100%, $uc-breakpoint, 67%);
        }

        [data-display-is~="width-one-half"] + [data-contains~="contact-details"] {
            @include ff-width(100%, $uc-breakpoint, 50%);
        }

        [data-display-is~="width-two-thirds"] + [data-contains~="contact-details"] {
            @include ff-width(100%, $uc-breakpoint, 33%);
        }


        // For theme-specific settings, see _themes.scss
        // Note this is identical to Panel, but that mixin can't be use because of the way it adds
        // classes. May need to rethink things.
        [data-display-as~="box"],
        [data-display-as~="themed-box"],
        [data-display-as~="notice-box"] {
            padding: $panel--padding;

            margin-bottom: $sz-m;

            @include bottom-space-fix();

            width: 100%;
        }

        [data-display-as~="box"] {
            border: 1px solid map-get(map-get($themes, neutral), primary-color);
        }

        [data-display-as~="themed-box"] {
            color: #fff;
            background: map-get(map-get($themes, npeu), primary-color);

            //outline: 1px solid $border-color;

            a[href] {
                color: #fff;
                //background-color: $background-color;
            }

            a[href]:hover,
            a[href]:active,
            a[href]:focus {
                color: #fff;
            }

            a[href].c-cta {
                border-color: #fff;
                color: #fff;
                background-color: transparent;
            }

            a[href].c-cta:hover,
            a[href].c-cta:active,
            a[href].c-cta:focus {
                @if f__color_light_or_dark(map-get(map-get($themes, npeu), primary-color)) == 'light' {
                    background-color: rgba(0,0,0,0.1);
                } @else {
                    background-color: rgba(255,255,255,0.1);
                }
            }
        }

        [data-display-as~="notice-box"] {
            border: 6px solid map-get(map-get($themes, npeu), secondary-color);
            background: scale-color(map-get(map-get($themes, npeu), secondary-color), $lightness: 93%);

            a[href].c-cta:hover,
            a[href].c-cta:active,
            a[href].c-cta:focus {
                @if f__color_light_or_dark(map-get(map-get($themes, npeu), secondary-color)) == 'light' {
                    background-color: rgba(0,0,0,0.1);
                } @else {
                    background-color: rgba(255,255,255,0.1);
                }
            }
        }

        // Layouts:

        [data-display-as~="blocks"] {
            @extend .l-distribute-wrap;
        }

        [data-display-as~="blocks"] > * {
            @extend .l-distribute;
        }

        [data-display-as~="blocks"] > * > * {
            @extend .u-space--below;
            @extend .u-text-align--center;
            @extend .u-padding--sides--s;

            -webkit-flex-basis: 15em;
                    flex-basis: 11.25em;
                     max-width: 15em;
        }



        [data-display-is~="pulled-left"],
        [data-display-is~="pulled-right"] {
            margin-bottom: $sz-m;

            display: -webkit-flex;
            display: -ms-flexbox;
            display: flex;

            -webkit-justify-content: center;
                      -ms-flex-pack: center;
                    justify-content: center;

            -webkit-flex-direction: column;
                -ms-flex-direction: column;
                    flex-direction: column;


            // We want some space on the right, but not when narrow screens effectively turn the
            // floating off:
            /*&::before,
            &::after {
                content: "";
                display: block;
                -webkit-flex: 0 0 auto;
                    -ms-flex: 0 0 auto;
                        flex: 0 0 auto;
                //@include ff-width($sz-m, $uc-breakpoint, 100%);
            }

            // Because these pseudo elements are children, we need to calculate parent's parent:

            &[data-display-is~="width-one-half"]::before,
            &[data-display-is~="width-one-half"]::after {
                @include ff-width($sz-m, ($uc-breakpoint / 2), 0);
            }*/
        }

        [data-display-is~="pulled-left"] {
            float: left;
            margin-right: $sz-m;

            &::before {
                display: none;
            }
        }

        [data-display-is~="pulled-right"] {
            float: right;
            margin-left: $sz-m;

            &::after {
                display: none;
            }
        }

        [data-display-is~="width-one-quarter"] {
            @include ff-width(100%, $uc-breakpoint, 25%);
        }

        [data-display-is~="width-one-third"] {
            @include ff-width(100%, $uc-breakpoint, 33%);
        }

        [data-display-is~="width-one-half"] {
            @include ff-width(100%, $uc-breakpoint, 50%);
        }

        [data-display-is~="width-two-thirds"] {
            @include ff-width(100%, $uc-breakpoint, 67%);
        }


        [data-contains~="image"] {
            //@extend .c-badge;
            // No - extend is too messy. Maybe create a mixin, but duplicate it here for now:
            display: inline-block;
            vertical-align: middle;
            position: relative; /* [1] */
           

            svg {
                max-width: 100%;
            }

            img {
                /*
                    1. This is to provide positioning context for the ::after pseudo-element.
                    2. This is so a broken image is still 100%.
                    3. Center in container.
                */

                position: relative; /* [1] */

                display: block; /* [2] */

                height: auto;
                width: auto;

                max-width: 100%;

                border-style: none;

                margin: 0 auto; /* [3] */

            }
        }
        
        a[href][data-contains~="image"] {
            border: 0;
            padding: 0;

            &:hover,
            &:active,
            &:focus {
                border: 0;
                box-shadow: 0 0 0 0.6rem #fff, 0 0 0 1.2rem rgba(0,0,0,.2);
            }
        }

        a[href][rel=external][data-contains~="image"]::after {
            position: absolute;
            right: -1em;
            top: -1em;
            width: 1.25em;
            height: 1.25em;
            display: block;
        }
        
        
        
        [data-contains~="logo"] img {
            max-height: 8rem;
            background-color: transparent;
        }

        [data-contains~="thumbnail"] {
            @extend .c-thumbnail;
        }


        [data-contains~="thumbnails"] a:first-of-type {
            @extend .c-thumbnail;
            @extend .u-space--below;
        }



        // Images:
        img {
            background: #fff;
        }

        b > img,
        b > i > img {
            border: 3px solid lighten(map-get(map-get($themes, neutral), primary-color), 10%);
        }

        b > i > img {
            padding: $sz-s;
        }


        // Avatar / portrait:
        img[src*="/img/avatars/"] {
            display: block;
            width: 100%;
            max-width: 16em;
            margin: 0 auto;

            border-radius: 99999px;
            overflow: hidden;


            //@extend .c-contact-avatar;
            //@extend .d-bands;
        }

        // Text content:
        [data-display-as~="smallprint"] {
            font-size: 0.875em;
        }

        [data-display-as~="strapline"] {
            font-size: 1.125em;
        }
        
        // Figures
        
        figcaption {
            text-align: center;
            font-size: 0.875em;
        }

    }
}